From: Roland Stigge <stigge@antcom.de>
Date: Tue, 20 Nov 2018 10:48:12 +0100
Subject: Fix compile error on some platforms

---
 test/modp_b64_test.c | 18 +++++++++---------
 test/modp_b85_test.c | 12 ++++++------
 2 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/test/modp_b64_test.c b/test/modp_b64_test.c
index a8f3d5b..fe0a60d 100644
--- a/test/modp_b64_test.c
+++ b/test/modp_b64_test.c
@@ -17,7 +17,7 @@ static char* testEndian(void)
 {
     /* this test that "1" is "AAAB" */
     char buf[100];
-    char result[10];
+    unsigned char result[10];
     char endian[] = { (char)0, (char)0, (char)1 };
     size_t d = modp_b64_encode(buf, endian, (size_t)3);
     mu_assert_int_equals(4, d);
@@ -32,7 +32,7 @@ static char* testEndian(void)
     mu_assert_int_equals(0, result[0]);
     mu_assert_int_equals(0, result[1]);
     mu_assert_int_equals(1, result[2]);
-    mu_assert_int_equals(-1, result[3]);
+    mu_assert_int_equals(255, result[3]);
 
     return 0;
 }
@@ -71,7 +71,7 @@ static char* testPadding(void)
     char msg[100];
     const char ibuf[6] = { 1, 1, 1, 1, 1, 1 };
     char obuf[10];
-    char rbuf[10];
+    unsigned char rbuf[10];
     size_t d = 0;
 
     /* 1 in, 4 out */
@@ -84,7 +84,7 @@ static char* testPadding(void)
     d = modp_b64_decode(rbuf, obuf, d);
     mu_assert_int_equals_msg(msg, 1, d);
     mu_assert_int_equals(1, rbuf[0]);
-    mu_assert_int_equals(-1, rbuf[1]);
+    mu_assert_int_equals(255, rbuf[1]);
 
     /* 2 in, 4 out */
     memset(obuf, 255, sizeof(obuf));
@@ -97,7 +97,7 @@ static char* testPadding(void)
     mu_assert_int_equals_msg(msg, 2, d);
     mu_assert_int_equals_msg(msg, 1, rbuf[0]);
     mu_assert_int_equals_msg(msg, 1, rbuf[1]);
-    mu_assert_int_equals_msg(msg, -1, rbuf[2]);
+    mu_assert_int_equals_msg(msg, 255, rbuf[2]);
 
     /* 3 in, 4 out */
     memset(obuf, 255, sizeof(obuf));
@@ -111,7 +111,7 @@ static char* testPadding(void)
     mu_assert_int_equals_msg(msg, 1, rbuf[0]);
     mu_assert_int_equals_msg(msg, 1, rbuf[1]);
     mu_assert_int_equals_msg(msg, 1, rbuf[2]);
-    mu_assert_int_equals_msg(msg, -1, rbuf[3]);
+    mu_assert_int_equals_msg(msg, 255, rbuf[3]);
 
     /* 4 in, 8 out */
     memset(obuf, 255, sizeof(obuf));
@@ -126,7 +126,7 @@ static char* testPadding(void)
     mu_assert_int_equals(1, rbuf[1]);
     mu_assert_int_equals(1, rbuf[2]);
     mu_assert_int_equals(1, rbuf[3]);
-    mu_assert_int_equals(-1, rbuf[4]);
+    mu_assert_int_equals(255, rbuf[4]);
 
     /* 5 in, 8 out */
     memset(obuf, 255, sizeof(obuf));
@@ -142,7 +142,7 @@ static char* testPadding(void)
     mu_assert_int_equals(1, rbuf[2]);
     mu_assert_int_equals(1, rbuf[3]);
     mu_assert_int_equals(1, rbuf[4]);
-    mu_assert_int_equals(-1, rbuf[5]);
+    mu_assert_int_equals(255, rbuf[5]);
 
     /* 6 in, 8 out */
     memset(obuf, 255, sizeof(obuf));
@@ -159,7 +159,7 @@ static char* testPadding(void)
     mu_assert_int_equals(1, rbuf[3]);
     mu_assert_int_equals(1, rbuf[4]);
     mu_assert_int_equals(1, rbuf[5]);
-    mu_assert_int_equals(-1, rbuf[6]);
+    mu_assert_int_equals(255, rbuf[6]);
 
     return 0;
 }
diff --git a/test/modp_b85_test.c b/test/modp_b85_test.c
index 1850215..240d1a2 100644
--- a/test/modp_b85_test.c
+++ b/test/modp_b85_test.c
@@ -18,7 +18,7 @@ static char* testEndian(void)
 {
     /* this test that "1" is "!!!!#" */
     char buf[100];
-    char result[10];
+    unsigned char result[10];
     char endian[] = { (char)0, (char)0, (char)0, (char)1 };
     size_t d = modp_b85_encode(buf, endian, (size_t)4);
     mu_assert_int_equals(5, d);
@@ -35,7 +35,7 @@ static char* testEndian(void)
     mu_assert_int_equals(0, result[1]);
     mu_assert_int_equals(0, result[2]);
     mu_assert_int_equals(1, result[3]);
-    mu_assert_int_equals(-1, result[4]);
+    mu_assert_int_equals(255, result[4]);
 
     return 0;
 }
@@ -85,9 +85,9 @@ static char* testBadCharDecode(void)
 
 static char* testEncodeDecode(void)
 {
-    char ibuf[10]; /* input */
-    char obuf[10]; /* output */
-    char rbuf[10]; /* final result */
+    unsigned char ibuf[10]; /* input */
+    unsigned char obuf[10]; /* output */
+    unsigned char rbuf[10]; /* final result */
     size_t d;
     int i, j, k, l;
     for (i = 0; i < 256; ++i) {
@@ -109,7 +109,7 @@ static char* testEncodeDecode(void)
                     mu_assert_int_equals(ibuf[1], rbuf[1]);
                     mu_assert_int_equals(ibuf[2], rbuf[2]);
                     mu_assert_int_equals(ibuf[3], rbuf[3]);
-                    mu_assert_int_equals(-1, rbuf[4]);
+                    mu_assert_int_equals(255, rbuf[4]);
                 }
             }
         }
